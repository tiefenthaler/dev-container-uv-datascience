# Dev Container Configuration File.

# The x-args section defines a reusable set of arguments using YAML anchors.
# - BUILD arguments ("UV_VER", "DEBIAN_VER" and "WORKSPACE_NAME") to pass to Dockerfile.
# - RUNTIME environment variable (passed to devcontainer.json) "*workspace_name" (≙"WORKSPACE_NAME") argument is defined once and reused across multiple configurations within this file.
x-args: &default-args
  UV_VER: "0.5.5"
  DEBIAN_VER: "bookworm"
  WORKSPACE_NAME: &workspace_name "workspace" # TODO: USE THIS VARIABLE, Add here and in devcontainer.json

services: # Top level element to configure the arguments of multiple services
  myproject: # "project" refers to the name of your project/application for which configurations are defined. Multiple projects can be configured.
  # TODO: *workspace_name:
    build: # Tells Docker Compose to build the Docker image using the Dockerfile in the specified directory.
      context: .
      dockerfile: ./Dockerfile.debug
      # Build argument (passed to Dockerfile only)
      args:
        <<: *default-args # The <<: *default-args syntax merges the default-args into the args section of the build configuration.
    image: dat/dev-container-uv-datascience # Explicit way to define the image name
    # TODO: image: dat/dev-container-uv-*workspace_name # Explicit way to define the image name
    # networks:
    #   - app-net

    # Host the FastAPI application on port 8000
    ports:
      - "8000:8000"

    # Volumes are persistent data stores (outside container), mounted to be usable by the container.
    volumes:
      # - ../:/*workspace_name
      - ..:/workspace # Mount the current directory to `/*workspace_name` so code changes don't require an image rebuild. .venv is excluded in the .dockerignore file.
      - /workspace/.venv # Mount the virtual environment separately, so the developer's environment doesn't end up in the container

    # working_dir: /*workspace_name
    working_dir: /workspace

    # Runtime environment variable, passed to devcontainer.json.
    # Environment variables to be set in the container, point to local files (⚡ local venv path ⚡).
    # environment:
      # - PYTHONPATH=/*workspace_name/src

    # Use environment variables from an external file
    # env_file:
    #   - .env

    # Default command to start the dev container
    command:
      - sh -c "chmod -R 777 /workspace && tail -f /dev/null" # Set permissions on the working directory for root user
