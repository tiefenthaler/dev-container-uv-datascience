# Use a python image with uv pre-installed and a Debian base image including the VS Code devcontainer base image.

# Define a build-time argument with a default value for base container images.
ARG UV_VER=0.5.5-python3.12
ARG DEBIAN_VER=bookworm
# Define a build-time argument with a default value for the workspace name.
ARG WORKSPACE_NAME=workspace

# Multi-Stage Build: Despite using two base images, only one container is built and run.
# The final container is based on the second image, while copying content from the uv stage into the final stage.
# FROM ghcr.io/astral-sh/uv:python3.12-bookworm
FROM ghcr.io/astral-sh/uv:$UV_VER AS uv
FROM mcr.microsoft.com/vscode/devcontainers/base:$DEBIAN_VER

USER root

# Install the project into ARG `WORKSPACE_NAME`
WORKDIR /${WORKSPACE_NAME}

# Copies files or directories from the uv stage into the final stage,
# and ensures that the ownership of the copied files is adjusted to the user and group in the final image,
# and making its functionality or binaries available in the final container.
COPY --from=uv --chown=vscode: /uv /uvx /bin/

# Enable bytecode compilation for faster startup
# ENV UV_COMPILE_BYTECODE=1

# Copy from the cache instead of linking since it's a mounted volume
# ENV UV_LINK_MODE=copy

# Install linux packages
RUN apt-get update
# Install git, process tools
# RUN apt-get update && apt-get upgrade -y && apt-get install -y git
# RUN apt-get update && apt-get -y install git procps build-essential curl swig
# RUN git config --global --add safe.directory /workspace

# Copy the necessary files into the container
# COPY uv.lock pyproject.toml /${WORKSPACE_NAME}/

# RUN --mount=type=cache,target=/root/.cache/uv
#     --mount=type=bind,source=/${WORKSPACE_NAME}/uv.lock,target=/${WORKSPACE_NAME}/uv.lock \
#     --mount=type=bind,source=/${WORKSPACE_NAME}/pyproject.toml,target=/${WORKSPACE_NAME}/pyproject.toml \
    # Production setup
    # uv sync --frozen --no-install-project --no-dev
    # Development setup
    # uv sync --no-install-project
# RUN uv sync --no-install-project

# Then, add the rest of the project source code and install it
# Installing separately from its dependencies allows optimal layer caching
# ADD . /${WORKSPACE_NAME}
# RUN --mount=type=cache,target=/root/.cache/uv \
    # Production setup
    # uv sync --frozen --no-dev
    # Development setup, with editable install of source code
# RUN uv add --editable ./src/ \
#     uv sync

# Place executables in the environment at the front of the path
ENV PATH="/${WORKSPACE_NAME}/.venv/bin:$PATH"

# Reset the entrypoint, don't invoke `uv`
# The code to run when container is started:
# Common practice to keep the Docker container running without performing any significant action. 
ENTRYPOINT ["tail", "-f", "/dev/null"]
