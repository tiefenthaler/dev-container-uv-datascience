# .github/workflows/check_all_workflows.yml

name: CI Workflows

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # schedule:
  #   - cron: '0 * * * *' # Check every hour

jobs:
  check_workflows:
    runs-on: ubuntu-latest
    steps:
      - name: Get Workflow Runs
        id: get_runs
        uses: actions/github-script@v6
        with:
          script: |
            const core = require('@actions/core');
            const context = github.context;

            const response = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              status: 'completed', 
              branch: 'main' 
            });

            let allSuccess = true;
            for (const run of response.data.workflow_runs) {
              if (run.status !== 'completed' || run.conclusion !== 'success') {
                allSuccess = false;
                break;
              }
            }

            core.setOutput('all_success', allSuccess);

      - name: Set Output
        run: |
          echo "::set-output name=all_success::${{ steps.get_runs.outputs.all_success }}"

      # - name: Create Status Badge
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const core = require('@actions/core');

      #       const allSuccess = core.getInput('all_success');
      #       const badgeColor = allSuccess ? 'brightgreen' : 'red';
      #       const badgeLabel = allSuccess ? 'passed' : 'failed';
      #       const badgeUrl = `https://img.shields.io/badge/CI_Workflows-${badgeLabel}-${badgeColor}?style=flat-square`; 

      #       core.setOutput('badge_url', badgeUrl);

      # - name: Update README
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const core = require('@actions/core');
      #       const github = require('@actions/github');
      #       const fs = require('fs');

      #       const badgeUrl = core.getInput('badge_url');

      #       const readmePath = 'README.md';

      #       // Read the existing README content
      #       let readmeContent = fs.readFileSync(readmePath, 'utf8');

      #       // Find the existing badge (if any)
      #       const oldBadgeRegex = /\[!\[.*\]\(.+\)/;
      #       const oldBadgeMatch = readmeContent.match(oldBadgeRegex);

      #       // Replace the old badge with the new one
      #       if (oldBadgeMatch) {
      #         readmeContent = readmeContent.replace(oldBadgeMatch[0], `![${badgeLabel}](${badgeUrl})`);
      #       } else {
      #         // Add the badge to the top of the README
      #         readmeContent = `![${badgeLabel}](${badgeUrl})\n${readmeContent}`;
      #       }

      #       // Write the updated README content
      #       fs.writeFileSync(readmePath, readmeContent, 'utf8');

      #       // Commit the changes
      #       const octokit = github.getOctokit(process.env.GITHUB_TOKEN);
      #       await octokit.rest.repos.createOrUpdateFileContents({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         path: readmePath,
      #         message: 'Update workflow status badge',
      #         content: Buffer.from(readmeContent).toString('base64'),
      #         sha: context.sha,
      #       });
